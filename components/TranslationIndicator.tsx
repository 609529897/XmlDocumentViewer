import { Dropdown, message, Modal, Skeleton } from "antd";
import { Divider } from "./Divider";
import { useState, useEffect } from "react";
import { useIsMobile } from "@/hooks";
import { SvgIcon } from "@/components/SvgIcon";
import { useActions } from "../hooks";

interface TranslationIndicatorProps {
  content: string;
  className?: string;
}

export const TranslationIndicator: React.FC<TranslationIndicatorProps> = ({
  content,
  className,
}) => {
  const { translate } = useActions();

  const isMobile = useIsMobile();
  const [open, setOpen] = useState(false);
  const [translatedContent, setTranslatedContent] = useState<string>("");
  const [loading, setLoading] = useState(false);

  // 当弹窗打开且有内容时，触发翻译
  useEffect(() => {
    const fetchTranslation = async () => {
      if (open && content && translate) {
        setLoading(true);
        try {
          const result = await translate(content);
          setTranslatedContent(result);
        } catch (error) {
          console.error("翻译失败:", error);
          message.error("翻译失败，请重试");
          setTranslatedContent("翻译失败，请重试");
        } finally {
          setLoading(false);
        }
      }
    };

    fetchTranslation();
  }, [open, content]);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(translatedContent || content || "");
      message.success("复制成功");
    } catch (err) {
      message.error("复制失败");
    }
  };

  // 重置翻译内容当关闭弹窗
  const handleClose = () => {
    setOpen(false);
    setTranslatedContent("");
    setLoading(false);
  };

  const TranslationPopup = (
    <div className="shadow-lg rounded-xl bg-white border border-[var(--kx-border-2)] max-w-[1000px] py-4 px-6">
      {/* 只有移动端才显示关闭按钮 */}
      {isMobile && (
        <div className="flex relative justify-end">
          <button onClick={handleClose} className="absolute -top-2 -right-4">
            <SvgIcon
              icon="icon-guanbi-da"
              className="w-4 h-4 text-[var(--kx-fill-5)]"
            />
          </button>
        </div>
      )}
      <div className="text-[var(--kx-text-1)] leading-[22px] text-xs">
        {loading ? (
          <div className="flex justify-center items-center py-4">
            <Skeleton
              paragraph={{
                rows: Math.min(
                  Math.max(Math.ceil((content?.length || 0) / 60), 1),
                  4
                ),
              }}
              title={false}
              active
            />
          </div>
        ) : (
          <>
            {translatedContent ||
              (content ? "翻译内容加载中..." : "暂无内容可翻译")}
            <span
              className="text-[var(--kx-text-2)] inline-flex items-center cursor-pointer relative top-0.5 left-2"
              onClick={handleCopy}
            >
              <SvgIcon
                icon="icon-fuzhi"
                className="w-[14px] h-[14px] text-[var(--kx-fill-5)] mr-[2px]"
              />
              复制
            </span>
          </>
        )}
      </div>
      <Divider className="!my-4" />
      <div className="text-[var(--kx-text-3)] text-xs leading-5">
        以上内容由大模型翻译自动生成，翻译内容仅供参考。对于因使用本网站翻译内容产生的相关后果，本网站不承担任何商业和法律责任。
        <br />
        The above content is generated by Large Model Translation. The
        translated content is for reference only. We do not assume any
        commercial or legal responsibility for any consequences arising from the
        use of our website with machine translated content.
      </div>
    </div>
  );

  if (!translate) {
    return null;
  }

  if (isMobile) {
    return (
      <>
        <button onClick={() => setOpen(true)} className={className}>
          <SvgIcon icon="icon-yi" className="w-5 h-5 text-blue-600" />
        </button>
        <Modal
          open={open}
          centered
          styles={{ content: { padding: 0 } }}
          footer={null}
          onCancel={handleClose}
          closeIcon={null}
        >
          {TranslationPopup}
        </Modal>
      </>
    );
  }

  return (
    <Dropdown
      trigger={["click"]}
      placement="topRight"
      open={open}
      popupRender={() => TranslationPopup}
      onOpenChange={(open) => setOpen(open)}
    >
      <button className={className}>
        <SvgIcon icon="icon-yi" className="w-5 h-5 text-blue-600" />
      </button>
    </Dropdown>
  );
};
